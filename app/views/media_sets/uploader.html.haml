-# OPTIMIZE: uploaderFileAdded is only used as a workaround, because appletInitialized doesn't seem to work reliable (on Safari)
:javascript
  function appletInitialized(applet) {
    setAuthenticityToken(applet, "#{@authenticity_token}");
    setPostAttribute("importMetadata", "1", applet);
  }

  function uploaderFileAdded(uploader, file) {
    appletInitialized(uploader);
  }

%h1
  Medien hochladen
  - if @media_set.defined?
    in Kollektion
    =h @media_set.caption
  %span{:style => 'float:right', :class => 'smalltext'}
    = link_to_function 'Hilfe anzeigen' do |page|
      - page.visual_effect(:toggle_blind, 'help', :duration => 0.5)

#help{:style => 'display: none'}
  %p 
    %em Hinweise zum Upload-Vorgang mit JumpLoader:

  %p
    Medien können über das Java Plugin "JumpLoader" hochgeladen werden.
    - if @media_set.defined?
      Nachdem Sie weitere Medien in die Kollektion hochgeladen haben, klicken Sie auf den Knopf "Weiter..." und nehmen Sie allenfalls die nötigen Definitionen für die neuen Medien vor.
    - elsif @media_set.uploading?
      Nachdem Sie die Medien hochgeladen haben, klicken Sie auf den Knopf "Weiter..." und nehmen Sie die nötigen Definitionen vor.

  %h2 Zulässige Dateiformate
  %p Zur Zeit können Sie Medien in den folgenden Formaten hochladen:
  %ul
    %li Bilder: GIF, PNG, JPEG, TIFF
    %li Audio-Clips: MP3
    %li Video-Clips: Quicktime MOV, Flash FLV
    %li Dokumente: ZIP, PDF, DOC, XLS, PPT

  %h2 Dateien hochladen
  Ziehen Sie Dateien oder einen Ordner in den Upload-Bereich ("Dateien hier her ziehen"). Die Dateien erscheinen als Vorschau. Drücken Sie dann den Hochlade-Knopf (Pfeil nach oben)

  %h2 Bilder bearbeiten
  %p Bilder, die Sie zum Hochladen ausgewählt haben, können Sie vor dem Hochladen noch bearbeiten. Klicken Sie dazu auf das Pinsel-Symbol auf dem Bild.

  = button_to_function 'Hilfe schliessen' do |page|
    - page.hide('help')


- jar_file = "jumploader_z-#{JUMPLOADER_VERSION.join('_')}.jar"
- post_url = "#{public_url}#{upload_media_set_path(@media_set, :format => :js)}"

%object{ :id => 'jumpLoaderApplet', :classid => 'java:jmaster.jumploader.app.JumpLoaderApplet.class', :type => 'application/x-java-applet', :width => '100%', :height => 440}
  %param{:name => 'codebase', :value => "#{public_url}/applets/" }/
  %param{:name => 'archive', :value => "#{JUMPLOADER_TRANSLATIONS_ZIP},#{jar_file}" }/
  %param{:name => 'mayscript', :value => 'true' }/

  %param{:name => 'ac_mode', :value => 'embedded' }/
  %param{:name => 'ac_fireAppletInitialized', :value => 'true' }/
  %param{:name => 'ac_fireUploaderFileStatusChanged', :value => 'true' }/
  %param{:name => 'ac_fireUploaderFileAdded', :value => 'true' }/
  -#%param{:name => 'ac_fireUploaderStatusChanged', :value => 'true' }/

  %param{:name => 'uc_urlEncodeParameters', :value => 'true' }/    
  %param{:name => 'uc_uploadUrl', :value => post_url }/
  %param{:name => 'uc_fileParameterName', :value => 'medium[uploaded_data]' }/
  %param{:name => 'uc_imageEditorEnabled', :value => 'true' }/
  %param{:name => 'uc_imageRotateEnabled', :value => 'true' }/
  %param{:name => 'uc_partitionLength', :value => 1024**3 }/
  %param{:name => 'uc_directoriesEnabled', :value => 'true' }/
  %param{:name => 'uc_fileNamePolicy', :value => 'name' }/                                                                                                                 
  
  -# Man könnte die Option useJMimeMagic verwenden, dieses detektiert allerdings sehr unvollständig.
  -# Z.B. habe ich MP3 Files und M4A Files die als content/unknown gelten! Fazit: Option zur Zeit nicht brauchbar
  -# mime_pattern = '^' + Medium.all_media_content_types.collect { |mt| "(#{Regexp::escape(mt)})" }.join('|') + '$'
  -#%param{:name => "uc_mimeTypePattern", :value => mime_pattern }/    
  -#%param{:name => "uc_useJMimeMagic", :value => 'true' }/
  
  -# Filetyp-Filter anhand Dateiendung:
  - pattern = "^.+\.(#{@allowed_upload_extensions.collect {|e| ["(#{e.to_s})", "(#{e.to_s.upcase})"] }.flatten.join('|')})$"
  %param{:name => "uc_fileNamePattern", :value => pattern }/
  %param{:name => "vc_fileNamePattern", :value => pattern }/
  
  - if MAX_FILE_SIZE
    %param{:name => 'uc_maxFileLength', :value => MAX_FILE_SIZE }/

  -#%param{:name => 'uc_sendImageMetadata', :value => 'true' }/

  %param{:name => 'vc_lookAndFeel', :value => 'system' }/           
  %param{:name => 'vc_uploadViewStartUploadButtonText', :value => '1. Dateien hochladen...' }/
  %param{:name => 'vc_uploadViewStopUploadButtonText', :value => 'Abbrechen' }/
  -#%param{:name => 'vc_thumbHeight', :value => '30' }/
  -#%param{:name => 'vc_mainViewFileTreeViewWidthPercent', :value => "33" }/
  -#%param{:name => 'vc_fileBrowserInitialLocation', :value => 'home' }/

  - if LOCAL_DEVELOPMENT
    %param{:name => 'gc_loggingLevel', :value => "DEBUG" }/

- if FEATURE_METADATA
  = check_box_tag 'metadata_import', '1', true, :onclick => 'setPostAttribute("importMetadata", this.checked ? this.value : null)'
  Metadaten (EXIF etc.) importieren

%br
%br
-if @media_set.defined?
  %h2
    Medien werden in bestehende Kollektion hochgeladen:
    = @media_set.caption
  =# render :partial => 'media_sets/collection_box', :object => @media_set
  = button_to "2. Kollektion #{@media_set.caption} bearbeiten...", edit_media_set_path(@media_set), :method => :get
-elsif @media_set.uploading?
  %h2 Medien werden in neue Kollektion hochgeladen
  =# render :partial => 'media_sets/collection_box', :object => @media_set
  = button_to "2. Neue Kollektion vervollständigen...", edit_media_set_path(@media_set), :method => :get
